{"version":3,"sources":["../../../src/php/array/natsort.js"],"names":["module","exports","natsort","inputArr","strnatcmp","require","valArr","k","i","sortByReference","populateArr","iniVal","undefined","hasOwnProperty","push","sort","a","b","length"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,OAAT,CAAkBC,QAAlB,EAA4B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,YAAYC,QAAQ,sBAAR,CAAhB;;AAEA,MAAIC,SAAS,EAAb;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,kBAAkB,KAAtB;AACA,MAAIC,cAAc,EAAlB;;AAEA,MAAIC,SAAS,CAAC,OAAON,OAAP,KAAmB,WAAnB,GAAiCA,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyFO,SAA1F,KAAwG,IAArH;AACAH,oBAAkBE,WAAW,IAA7B;AACAD,gBAAcD,kBAAkBN,QAAlB,GAA6BO,WAA3C;;AAEA;AACA,OAAKH,CAAL,IAAUJ,QAAV,EAAoB;AAClB,QAAIA,SAASU,cAAT,CAAwBN,CAAxB,CAAJ,EAAgC;AAC9BD,aAAOQ,IAAP,CAAY,CAACP,CAAD,EAAIJ,SAASI,CAAT,CAAJ,CAAZ;AACA,UAAIE,eAAJ,EAAqB;AACnB,eAAON,SAASI,CAAT,CAAP;AACD;AACF;AACF;AACDD,SAAOS,IAAP,CAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC1B,WAAOb,UAAUY,EAAE,CAAF,CAAV,EAAgBC,EAAE,CAAF,CAAhB,CAAP;AACD,GAFD;;AAIA;AACA,OAAKT,IAAI,CAAT,EAAYA,IAAIF,OAAOY,MAAvB,EAA+BV,GAA/B,EAAoC;AAClCE,gBAAYJ,OAAOE,CAAP,EAAU,CAAV,CAAZ,IAA4BF,OAAOE,CAAP,EAAU,CAAV,CAA5B;AACD;;AAED,SAAOC,mBAAmBC,WAA1B;AACD,CAlDD","file":"natsort.js","sourcesContent":["module.exports = function natsort (inputArr) {\n  //  discuss at: http://locutus.io/php/natsort/\n  // original by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  // improved by: Theriault (https://github.com/Theriault)\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //   example 1: var $array1 = {a:\"img12.png\", b:\"img10.png\", c:\"img2.png\", d:\"img1.png\"}\n  //   example 1: natsort($array1)\n  //   example 1: var $result = $array1\n  //   returns 1: {d: 'img1.png', c: 'img2.png', b: 'img10.png', a: 'img12.png'}\n\n  var strnatcmp = require('../strings/strnatcmp')\n\n  var valArr = []\n  var k\n  var i\n  var sortByReference = false\n  var populateArr = {}\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Get key and value arrays\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      valArr.push([k, inputArr[k]])\n      if (sortByReference) {\n        delete inputArr[k]\n      }\n    }\n  }\n  valArr.sort(function (a, b) {\n    return strnatcmp(a[1], b[1])\n  })\n\n  // Repopulate the old array\n  for (i = 0; i < valArr.length; i++) {\n    populateArr[valArr[i][0]] = valArr[i][1]\n  }\n\n  return sortByReference || populateArr\n}\n"]}