{"version":3,"sources":["../../../src/php/array/ksort.js"],"names":["module","exports","ksort","inputArr","sortFlags","i18nlgd","require","strnatcmp","tmpArr","keys","sorter","i","k","sortByReference","populateArr","$global","window","global","$locutus","php","locales","a","b","loc","sorting","aFloat","parseFloat","bFloat","aNumeric","bNumeric","hasOwnProperty","push","sort","iniVal","undefined","length"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,KAAT,CAAgBC,QAAhB,EAA0BC,SAA1B,EAAqC;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIC,UAAUC,QAAQ,8BAAR,CAAd;AACA,MAAIC,YAAYD,QAAQ,sBAAR,CAAhB;;AAEA,MAAIE,SAAS,EAAb;AACA,MAAIC,OAAO,EAAX;AACA,MAAIC,MAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,CAAJ;AACA,MAAIC,kBAAkB,KAAtB;AACA,MAAIC,cAAc,EAAlB;;AAEA,MAAIC,UAAW,OAAOC,MAAP,KAAkB,WAAlB,GAAgCA,MAAhC,GAAyCC,MAAxD;AACAF,UAAQG,QAAR,GAAmBH,QAAQG,QAAR,IAAoB,EAAvC;AACA,MAAIA,WAAWH,QAAQG,QAAvB;AACAA,WAASC,GAAT,GAAeD,SAASC,GAAT,IAAgB,EAA/B;AACAD,WAASC,GAAT,CAAaC,OAAb,GAAuBF,SAASC,GAAT,CAAaC,OAAb,IAAwB,EAA/C;;AAEA,UAAQhB,SAAR;AACE,SAAK,aAAL;AACE;AACAM,eAAS,gBAAUW,CAAV,EAAaC,CAAb,EAAgB;AACvB,eAAOf,UAAUe,CAAV,EAAaD,CAAb,CAAP;AACD,OAFD;AAGA;AACF,SAAK,oBAAL;AACE;AACA;AACA,UAAIE,MAAMlB,SAAV;AACAK,eAASQ,SAASE,OAAT,CAAiBG,GAAjB,EAAsBC,OAA/B;AACA;AACF,SAAK,cAAL;AACE;AACAd,eAAS,gBAAUW,CAAV,EAAaC,CAAb,EAAgB;AACvB,eAASD,IAAI,CAAL,IAAWC,IAAI,CAAf,CAAR;AACD,OAFD;AAGA;AACF;AACE;AACAZ,eAAS,gBAAUW,CAAV,EAAaC,CAAb,EAAgB;AACvB,YAAIG,SAASC,WAAWL,CAAX,CAAb;AACA,YAAIM,SAASD,WAAWJ,CAAX,CAAb;AACA,YAAIM,WAAWH,SAAS,EAAT,KAAgBJ,CAA/B;AACA,YAAIQ,WAAWF,SAAS,EAAT,KAAgBL,CAA/B;AACA,YAAIM,YAAYC,QAAhB,EAA0B;AACxB,iBAAOJ,SAASE,MAAT,GAAkB,CAAlB,GAAsBF,SAASE,MAAT,GAAkB,CAAC,CAAnB,GAAuB,CAApD;AACD,SAFD,MAEO,IAAIC,YAAY,CAACC,QAAjB,EAA2B;AAChC,iBAAO,CAAP;AACD,SAFM,MAEA,IAAI,CAACD,QAAD,IAAaC,QAAjB,EAA2B;AAChC,iBAAO,CAAC,CAAR;AACD;AACD,eAAOR,IAAIC,CAAJ,GAAQ,CAAR,GAAYD,IAAIC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhC;AACD,OAbD;AAcA;AAnCJ;;AAsCA;AACA,OAAKV,CAAL,IAAUT,QAAV,EAAoB;AAClB,QAAIA,SAAS2B,cAAT,CAAwBlB,CAAxB,CAAJ,EAAgC;AAC9BH,WAAKsB,IAAL,CAAUnB,CAAV;AACD;AACF;AACDH,OAAKuB,IAAL,CAAUtB,MAAV;;AAEA,MAAIuB,SAAS,CAAC,OAAO3B,OAAP,KAAmB,WAAnB,GAAiCA,QAAQ,iBAAR,EAA2B,yBAA3B,CAAjC,GAAyF4B,SAA1F,KAAwG,IAArH;AACArB,oBAAkBoB,WAAW,IAA7B;AACAnB,gBAAcD,kBAAkBV,QAAlB,GAA6BW,WAA3C;;AAEA;AACA,OAAKH,IAAI,CAAT,EAAYA,IAAIF,KAAK0B,MAArB,EAA6BxB,GAA7B,EAAkC;AAChCC,QAAIH,KAAKE,CAAL,CAAJ;AACAH,WAAOI,CAAP,IAAYT,SAASS,CAAT,CAAZ;AACA,QAAIC,eAAJ,EAAqB;AACnB,aAAOV,SAASS,CAAT,CAAP;AACD;AACF;AACD,OAAKD,CAAL,IAAUH,MAAV,EAAkB;AAChB,QAAIA,OAAOsB,cAAP,CAAsBnB,CAAtB,CAAJ,EAA8B;AAC5BG,kBAAYH,CAAZ,IAAiBH,OAAOG,CAAP,CAAjB;AACD;AACF;;AAED,SAAOE,mBAAmBC,WAA1B;AACD,CA9GD","file":"ksort.js","sourcesContent":["module.exports = function ksort (inputArr, sortFlags) {\n  //  discuss at: http://locutus.io/php/ksort/\n  // original by: GeekFG (http://geekfg.blogspot.com)\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Brett Zamir (http://brett-zamir.me)\n  //      note 1: This function deviates from PHP in returning a copy of the array instead\n  //      note 1: of acting by reference and returning true; this was necessary because\n  //      note 1: IE does not allow deleting and re-adding of properties without caching\n  //      note 1: of property position; you can set the ini of \"locutus.sortByReference\" to true to\n  //      note 1: get the PHP behavior, but use this only if you are in an environment\n  //      note 1: such as Firefox extensions where for-in iteration order is fixed and true\n  //      note 1: property deletion is supported. Note that we intend to implement the PHP\n  //      note 1: behavior by default if IE ever does allow it; only gives shallow copy since\n  //      note 1: is by reference in PHP anyways\n  //      note 1: Since JS objects' keys are always strings, and (the\n  //      note 1: default) SORT_REGULAR flag distinguishes by key type,\n  //      note 1: if the content is a numeric string, we treat the\n  //      note 1: \"original type\" as numeric.\n  //   example 1: var $data = {d: 'lemon', a: 'orange', b: 'banana', c: 'apple'}\n  //   example 1: ksort($data)\n  //   example 1: var $result = $data\n  //   returns 1: {a: 'orange', b: 'banana', c: 'apple', d: 'lemon'}\n  //   example 2: ini_set('locutus.sortByReference', true)\n  //   example 2: var $data = {2: 'van', 3: 'Zonneveld', 1: 'Kevin'}\n  //   example 2: ksort($data)\n  //   example 2: var $result = $data\n  //   returns 2: {1: 'Kevin', 2: 'van', 3: 'Zonneveld'}\n\n  var i18nlgd = require('../i18n/i18n_loc_get_default')\n  var strnatcmp = require('../strings/strnatcmp')\n\n  var tmpArr = {}\n  var keys = []\n  var sorter\n  var i\n  var k\n  var sortByReference = false\n  var populateArr = {}\n\n  var $global = (typeof window !== 'undefined' ? window : global)\n  $global.$locutus = $global.$locutus || {}\n  var $locutus = $global.$locutus\n  $locutus.php = $locutus.php || {}\n  $locutus.php.locales = $locutus.php.locales || {}\n\n  switch (sortFlags) {\n    case 'SORT_STRING':\n      // compare items as strings\n      sorter = function (a, b) {\n        return strnatcmp(b, a)\n      }\n      break\n    case 'SORT_LOCALE_STRING':\n      // compare items as strings, based on the current locale\n      // (set with i18n_loc_set_default() as of PHP6)\n      var loc = i18nlgd()\n      sorter = $locutus.locales[loc].sorting\n      break\n    case 'SORT_NUMERIC':\n      // compare items numerically\n      sorter = function (a, b) {\n        return ((a + 0) - (b + 0))\n      }\n      break\n    default:\n      // case 'SORT_REGULAR': // compare items normally (don't change types)\n      sorter = function (a, b) {\n        var aFloat = parseFloat(a)\n        var bFloat = parseFloat(b)\n        var aNumeric = aFloat + '' === a\n        var bNumeric = bFloat + '' === b\n        if (aNumeric && bNumeric) {\n          return aFloat > bFloat ? 1 : aFloat < bFloat ? -1 : 0\n        } else if (aNumeric && !bNumeric) {\n          return 1\n        } else if (!aNumeric && bNumeric) {\n          return -1\n        }\n        return a > b ? 1 : a < b ? -1 : 0\n      }\n      break\n  }\n\n  // Make a list of key names\n  for (k in inputArr) {\n    if (inputArr.hasOwnProperty(k)) {\n      keys.push(k)\n    }\n  }\n  keys.sort(sorter)\n\n  var iniVal = (typeof require !== 'undefined' ? require('../info/ini_get')('locutus.sortByReference') : undefined) || 'on'\n  sortByReference = iniVal === 'on'\n  populateArr = sortByReference ? inputArr : populateArr\n\n  // Rebuild array with sorted key names\n  for (i = 0; i < keys.length; i++) {\n    k = keys[i]\n    tmpArr[k] = inputArr[k]\n    if (sortByReference) {\n      delete inputArr[k]\n    }\n  }\n  for (i in tmpArr) {\n    if (tmpArr.hasOwnProperty(i)) {\n      populateArr[i] = tmpArr[i]\n    }\n  }\n\n  return sortByReference || populateArr\n}\n"]}