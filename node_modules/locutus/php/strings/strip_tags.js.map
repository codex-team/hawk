{"version":3,"sources":["../../../src/php/strings/strip_tags.js"],"names":["module","exports","strip_tags","input","allowed","toLowerCase","match","join","tags","commentsAndPhpTags","replace","$0","$1","indexOf"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,SAASC,UAAT,CAAqBC,KAArB,EAA4BC,OAA5B,EAAqC;AAAE;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAA,YAAU,CAAC,CAAC,CAACA,WAAW,EAAZ,IAAkB,EAAnB,EAAuBC,WAAvB,GAAqCC,KAArC,CAA2C,mBAA3C,KAAmE,EAApE,EAAwEC,IAAxE,CAA6E,EAA7E,CAAV;;AAEA,MAAIC,OAAO,gCAAX;AACA,MAAIC,qBAAqB,0CAAzB;;AAEA,SAAON,MAAMO,OAAN,CAAcD,kBAAd,EAAkC,EAAlC,EAAsCC,OAAtC,CAA8CF,IAA9C,EAAoD,UAAUG,EAAV,EAAcC,EAAd,EAAkB;AAC3E,WAAOR,QAAQS,OAAR,CAAgB,MAAMD,GAAGP,WAAH,EAAN,GAAyB,GAAzC,IAAgD,CAAC,CAAjD,GAAqDM,EAArD,GAA0D,EAAjE;AACD,GAFM,CAAP;AAGD,CA3CD","file":"strip_tags.js","sourcesContent":["module.exports = function strip_tags (input, allowed) { // eslint-disable-line camelcase\n  //  discuss at: http://locutus.io/php/strip_tags/\n  // original by: Kevin van Zonneveld (http://kvz.io)\n  // improved by: Luke Godfrey\n  // improved by: Kevin van Zonneveld (http://kvz.io)\n  //    input by: Pul\n  //    input by: Alex\n  //    input by: Marc Palau\n  //    input by: Brett Zamir (http://brett-zamir.me)\n  //    input by: Bobby Drake\n  //    input by: Evertjan Garretsen\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Eric Nagel\n  // bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  // bugfixed by: Tomasz Wesolowski\n  //  revised by: Rafa≈Ç Kukawski (http://blog.kukawski.pl)\n  //   example 1: strip_tags('<p>Kevin</p> <br /><b>van</b> <i>Zonneveld</i>', '<i><b>')\n  //   returns 1: 'Kevin <b>van</b> <i>Zonneveld</i>'\n  //   example 2: strip_tags('<p>Kevin <img src=\"someimage.png\" onmouseover=\"someFunction()\">van <i>Zonneveld</i></p>', '<p>')\n  //   returns 2: '<p>Kevin van Zonneveld</p>'\n  //   example 3: strip_tags(\"<a href='http://kvz.io'>Kevin van Zonneveld</a>\", \"<a>\")\n  //   returns 3: \"<a href='http://kvz.io'>Kevin van Zonneveld</a>\"\n  //   example 4: strip_tags('1 < 5 5 > 1')\n  //   returns 4: '1 < 5 5 > 1'\n  //   example 5: strip_tags('1 <br/> 1')\n  //   returns 5: '1  1'\n  //   example 6: strip_tags('1 <br/> 1', '<br>')\n  //   returns 6: '1 <br/> 1'\n  //   example 7: strip_tags('1 <br/> 1', '<br><br/>')\n  //   returns 7: '1 <br/> 1'\n\n  // making sure the allowed arg is a string containing only tags in lowercase (<a><b><c>)\n  allowed = (((allowed || '') + '').toLowerCase().match(/<[a-z][a-z0-9]*>/g) || []).join('')\n\n  var tags = /<\\/?([a-z][a-z0-9]*)\\b[^>]*>/gi\n  var commentsAndPhpTags = /<!--[\\s\\S]*?-->|<\\?(?:php)?[\\s\\S]*?\\?>/gi\n\n  return input.replace(commentsAndPhpTags, '').replace(tags, function ($0, $1) {\n    return allowed.indexOf('<' + $1.toLowerCase() + '>') > -1 ? $0 : ''\n  })\n}\n"]}